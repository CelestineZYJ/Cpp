//"SeqListBase.h"
#ifndef SEQ_H
#define SEQ_H

class LinearList{
public:
	LinearList(){};
	~LinearList(){};
	virtual int Size() const = 0;
	virtual int Length() const = 0;
	virtual int Search( int &x ) const = 0;
	virtual int Locate( int i ) const = 0;
	virtual bool getData( int i, int &x ) const = 0;
	virtual void setData( int i, int &x ) = 0;
	virtual bool Insert( int i, int &x ) = 0;
	virtual bool Remove( int i, int &x ) = 0;
	virtual bool isEmpty() const = 0 ;
	virtual bool isFull() const = 0;
	virtual void input() = 0;
	virtual void output() = 0;
//	virtual LinearList operator=( LinearList &L ) = 0;
};
#endif

//"SeqListDerive.h"
#include <iostream>
#include <stdlib.h>
#include "SeqListBase.h"
using namespace std;

const int defaultSize = 100;

class SeqList: public LinearList{
protected:
	int *data;
	int maxSize;
	int last;
	void reSize( int newSize );
public:
	SeqList( int sz = defaultSize );
	SeqList( SeqList &L );
	~SeqList(){ delete []data; };
	int Size() const{ return maxSize; }
	int Length() const{ return last + 1; }
	int Search( int &x ) const;
	int Locate( int i ) const;
	bool getData( int i, int &x ) const
	{ if( i > 0 && i <= last + 1 ){ x = data[ i - 1 ]; return true; } else return false; }
	void setData( int i, int &x )
	{ if( i > 0 && i <= last + 1 ) data[ i - 1 ] = x; }
	bool Insert( int i, int &x );
	bool Remove( int i, int &x );
	bool isEmpty() const{ return ( last == -1 )? true: false; }
	bool isFull() const{ return ( last == maxSize - 1 )? true: false; }
	void findSubArray( int, int, const int, int, bool );

	void input();
	void output();

	SeqList operator=( SeqList &L );
};

//"memfunction.cpp"
#include "SeqListDerive.h"
#include "SeqListBase.h"
using namespace std;

SeqList::SeqList( int sz ): LinearList(){
	if( sz > 0 ){
		maxSize = sz; last = -1;
		data = new int[ maxSize ];
		if( data == NULL ){
			cerr << "存储分配错误！" << endl; exit( 1 ); }
	}
}

SeqList::SeqList( SeqList &L ){
	maxSize = L.Size(); last = L.Length() - 1; int value;
	data = new int[ maxSize ];
	if( data == NULL ){
		cerr << "存储分配错误！" << endl; exit( 1 ); }
	for( int i = 0; i <= last + 1; i++ )
	    { L.getData( i, value ); data[ i - 1 ] = value;}
}

void SeqList::reSize( int newSize ){
	if( newSize <= 0 )
		cerr << "无效的数组大小！" << endl; return;
	if( newSize != maxSize ){
		int *newArray = new int[ newSize ];
		if( newArray == NULL )
			{ cerr << "存储分配错误！" << endl; exit( 1 ); }
		int n = last + 1;
		int *scrptr = data;
		int *desptr = newArray;
		while( n-- )
			*desptr++ = *scrptr++;
		delete []data;
		data = newArray; maxSize = newSize;
	}
}

int SeqList::Search( int &x ) const{
	for( int i = 0; i <= last + 1; i++ )
		if( data[ i ] == x ) return i + 1; 
	return 0;
}

int SeqList::Locate( int i ) const{
	if( i >= 1 && i <= last + 1 ) return i;
	else return 0;
}

bool SeqList::Insert( int i, int &x ){
	if( last == maxSize - 1 ) return false;
	if( i < 0 || i > last + 1 ) return false; 
	for( int j = last; j >= i; j-- )
		data[ j + 1 ] = data[ j ];
	data[ i ] = x;
	last++;
	return true;
}

bool SeqList::Remove( int i, int &x ){
	if( last == -1 ) return false;
	if( i < 1 || i > last + 1 ) return false;
	x = data[ i - 1 ];
	for( int j = i; j <= last; j++ )
		data[ j - 1 ] = data[ j ];
	last--;
	return true;
}

void SeqList::input(){
	cout << "开始建立顺序表，请输入表中最后一个元素下标：";
	while( 1 ){
		cin >> last;
		if( last <= maxSize - 1 ) break;
		cout << "表中数据有误，范围不能超过" << maxSize - 1 << ":";
	}
	for( int i = 0; i <= last; i++ )
	{ cout << "data[ " << i << " ]: "; cin >> data[ i ]; }
};

void SeqList::output(){
	cout << "顺序表当前元素最后位置为：" << last << endl;
	for( int i = 0; i <= last; i++ )
		cout << "#" << i + 1 << ":" << data[ i ] << endl;
}

SeqList SeqList::operator=( SeqList &L ){
	int value;
	if( this->maxSize == L.Size() )
		for( int i = 0; i <= last + 1; i++ )
		    { L.getData( i, value ); this->data[ i - 1 ] = value; }
	else{
		this->maxSize = L.Size(); this->last = L.Length() - 1; 
		int *newArray = new int[ maxSize ];
		if( newArray == NULL ){
			cerr << "存储分配错误！" << endl; exit( 1 ); }
	    for( int i = 0; i <= last + 1; i++ )
	        { L.getData( i, value ); newArray[ i - 1 ] = value; }
		delete []data;
		data = newArray;
	}
	return *this;
}

void SeqList::findSubArray( int F, int L, const int Asum, int Csum, bool sentinel ){
	if( F == L || L > last || F > last ){
		if( !sentinel )
			cout << "Haven't found such subArray." << endl;
		return; }
	else{ 
		int i;
		for( i = F; i <= L; i++ )
			Csum += data[ i ];
		if( Csum == Asum ){
			sentinel = true;
			for( i = F; i <= L - 1; i++ )
				cout << "data[ " << i << " ] + ";
			cout << "data[ " << L << " ] = ";
			for( i = F; i <= L - 1; i++ )
				cout << data[ i ] << "  + ";
			cout << data[ L ] << " = " << Asum << endl;
			findSubArray( ++++F, ++L, Asum, 0, sentinel ); }
		if( Csum < Asum )
			findSubArray( F, ++L, Asum, 0, sentinel );
		if( Csum > Asum )
			findSubArray( ++F, L, Asum, 0, sentinel );
	}
}

//"main.cpp"
#include "SeqListDerive.h"
#include <iostream>
using namespace std;

int main(){
	SeqList List;
	List.input();
	List.findSubArray( 0, 1, 15, 0, 0 );

	system( "pause" );
	return 0;
}
